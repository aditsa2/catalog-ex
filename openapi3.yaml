openapi: 3.0.1
info:
  title: products catalog service
  description: catalog service
  version: 1.0.0
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: http://localhost:8080
paths:
  /getProducts:
    get:
      operationId: getProducts
      tags:
        - getProducts
      summary: get products from db catalog, accroding to the filter in requestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestBodyForFilter'          
      responses:
        200:
          description: A list of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/product'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: NOT FOUND
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        500:
          description: SERVER ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

  /addProduct:
    post:
      operationId: addProduct
      tags:
        - addProduct
      summary: creates a new record of type product
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/product'          
      responses:
        201:
          description: created, send back the product that added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/product'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        500:
          description: SERVER ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

  /updateProduct/{id}:
    patch:
      operationId: updateProduct
      tags:
        - updateProduct
      summary: update the chosen feilds of a product
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/product'      
      responses:
        200:
          description: updated, send back the product that updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/product'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        500:
          description: SERVER ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

  /deleteProduct/{id}:
    delete:
      operationId: deleteProduct
      tags:
        - deleteProduct
      summary: delete the a product by its id   
      responses:
        200:
          description: deleted, send back the product that deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/product'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        500:
          description: SERVER ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'



components:
  schemas:
    error:
      type: object
      required:
        - message
      properties:
        message:
          type: string
    requestBodyForFilter:
      type: object
      required:
        - arrayOfilterProduct
      properties:
        arrayOfilterProduct:
          type: array
          items:
            $ref: '#/components/schemas/filterProduct'
        limit:
          type: integer
          minimum: 0
        skip:
          type: integer
          minimum: 0
    filterProduct:
              # expmple: {feild:'minZoom',oprator:'>',filterArg:'10'}
      type: object
      required:
        - feild
        - oprator
        - filterArg
      properties:
        feild:
          type: string
        operator:
          type: string
        filterArg:
          type: string
    product:
      type: object
      properties:
        id:
          type: number
          format: int64
        name:
          type: string
        description:
          type: string
        bounding_polygon:
          type: string
        consumtionLink:
          type: string
        type:
          type: string
          enum:
            - raster
            - rasterized vector
            - 3d tiles
            - QMesh
        consumtionProtocol:
          type: string
          enum:
            - WMS
            - WMTS
            - XYZ
            - 3D Tiles
        resolutionBest:
          type: number
          format: int64
        minZoom:
          type: number
          format: int64
        maxZoom:
          type: number
          format: int64

